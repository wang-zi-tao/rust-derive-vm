use lexical_derive::{lexical, Lexical};
use syntax_derive::lalr1_analyser;

fn main() {
    println!("Hello, world!");
}
#[lexical([
"名之曰","以","其","所餘幾何","昔之","者","今","是矣","曰","之","吾有","其物如是","物之","是謂","之物也","矣","批曰","注曰","是術曰","欲行是術","必先得","之術也","疏曰",  "數","言","爻","列","物","術",  "陰",  "若","若非","乃止","中有陽乎","中無陰乎","乃歸空無","乃得","為是","遍","恆為是","凡","中之","云云",  "大於","不大於","加","除","減","夫","銜","長","其餘","書之",
],[])]
#[derive(Debug, Clone, PartialEq)]
pub enum 文言词法 {
    #[lexical(string = "。")]
    句号,
    #[lexical(regex = "「[^」]」")]
    变量(String),
    #[lexical(regex = "「「[^」]」」")]
    一言(String),
    #[lexical(regex = "「[^」]」")]
    数(String),
}
pub fn 解析语法() {
    use 文言词法::*;
    lalr1_analyser! {
        解析语法:文言词法->(){
            文言=>()->{[语句列表]},
            语句列表=>()->{[]|[语句]},
            语句=>()->{
                [昔之,变量(甲),者,句号,今,变量(乙),是矣,句号]=>todo!();
                | [表达式列表(a),名之曰,变量名列表(b),句号]=>todo!();
                | [批曰,句号,一言(_)]=>Ok(()); | [注曰,句号,一言(_)]=>Ok(()); | [疏曰,句号,一言(_)]=>Ok(());
            },
            表达式列表=>()->{
                [吾有,数(a),类型(b),常量列表(c)]=>todo!();
                | [运算(a),操作数(b),以,操作数(c)]=>todo!();
                | [表达式列表(l),运算(a),其,以,操作数(c)]=>todo!();
            },
            常量=>()->{
                [数]=>todo!();
                | [一言]=>todo!();
            },
            运算=>()->{
                [加]=>todo!();
            },
            类型=>()->{
                [数]=>todo!();
            },
            操作数=>()->{
                [变量]=>todo!();
                | [数]=>todo!();
                | [一言]=>todo!();
                | [其]=>todo!();
            },
            变量名列表=>()->{ [曰,变量(a)]=>todo!(); |[变量名列表,曰,变量(a)]=>todo!(); },
            常量列表=>()->{ [曰,常量(a),句号]=>todo!(); |[常量列表,曰,变量(a),句号]=>todo!(); },
        }
    }
}
